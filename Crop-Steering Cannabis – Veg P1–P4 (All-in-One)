blueprint:
  name: Crop-Steering Cannabis – Veg P1–P4 (All-in-One)
  description: >
    Automatisierung der vier Phasen Ramp-Up (P1), Maintenance (P2),
    Ramp-Down (P3) und Dry-Back (P4) im vegetativen Zyklus.
  domain: automation
  input:
    # Gemeinsame Inputs
    soil_moisture_sensor:
      name: Bodenfeuchtigkeitssensor
      description: Misst die aktuelle Bodenfeuchte (%).
      selector:
        entity:
          domain: moisture
          device_class: humidity

    irrigation_valve:
      name: Bewässerungsventil
      description: Schalter oder Ventil, das das Gießen ein-/ausschaltet.
      selector:
        entity:
          domain: valve

    notification_service:
      name: Benachrichtigungsdienst
      description: Service für Status-Nachrichten (z. B. telegram_bot.send_message).
      default: telegram_bot.send_message
      selector:
        text: {}

    # P1 – Ramp-Up
    p1_start_time:
      name: P1 Startzeit
      description: Uhrzeit zum Start der Ramp-Up-Phase.
      default: '06:00:00'
      selector:
        time: {}

    p1_target_moisture:
      name: P1 Zielfeuchte (%)
      description: Bodenfeuchte-Ziel für Ramp-Up.
      default: 75
      selector:
        number:
          min: 20
          max: 90
          unit_of_measurement: '%'
          step: 1

    p1_max_shots:
      name: P1 Max. Shots
      description: Maximale Anzahl der kurzen Bewässerungs-Shots.
      default: 5
      selector:
        number:
          min: 1
          max: 10
          step: 1

    p1_shot_duration:
      name: P1 Shot-Dauer (Sek.)
      description: Dauer jedes Shots in Sekunden.
      default: 30
      selector:
        number:
          min: 5
          max: 600
          unit_of_measurement: seconds
          step: 5

    p1_dryback_pct:
      name: P1 Dry-Back (%)
      description: Prozentuale Abnahme, auf die nach jedem Shot gewartet wird.
      default: 10
      selector:
        number:
          min: 1
          max: 30
          unit_of_measurement: '%'
          step: 1

    # P2 – Maintenance
    p2_start_time:
      name: P2 Startzeit
      description: Uhrzeit zum Beginn der Maintenance-Phase.
      default: '10:00:00'
      selector:
        time: {}

    p2_end_time:
      name: P2 Endzeit
      description: Uhrzeit zum Ende der Maintenance-Phase.
      default: '18:00:00'
      selector:
        time: {}

    p2_interval:
      name: P2 Intervall (Min.)
      description: Pause zwischen den Maintenance-Shots in Minuten.
      default: 120
      selector:
        number:
          min: 5
          max: 480
          unit_of_measurement: minutes
          step: 10

    p2_shot_duration:
      name: P2 Shot-Dauer (Sek.)
      description: Dauer jedes Maintenance-Shots in Sekunden.
      default: 20
      selector:
        number:
          min: 5
          max: 600
          unit_of_measurement: seconds
          step: 5

    # P3 – Ramp-Down
    p3_start_time:
      name: P3 Startzeit
      description: Uhrzeit zum Beginn der Ramp-Down-Phase.
      default: '18:00:00'
      selector:
        time: {}

    p3_end_time:
      name: P3 Endzeit
      description: Uhrzeit zum Ende der Ramp-Down-Phase.
      default: '20:00:00'
      selector:
        time: {}

    p3_interval:
      name: P3 Intervall (Min.)
      description: Pause zwischen den Ramp-Down-Shots in Minuten.
      default: 60
      selector:
        number:
          min: 5
          max: 600
          unit_of_measurement: minutes
          step: 30

    p3_shot_duration:
      name: P3 Shot-Dauer (Sek.)
      description: Dauer jedes Ramp-Down-Shots in Sekunden.
      default: 15
      selector:
        number:
          min: 5
          max: 60
          unit_of_measurement: seconds
          step: 5

    # P4 – Dry-Back
    p4_start_time:
      name: P4 Startzeit
      description: Uhrzeit zum Beginn der Trockenphase (Dry-Back).
      default: '20:00:00'
      selector:
        time: {}

mode: single

trigger:
  - platform: time
    at: !input p1_start_time
    id: p1
  - platform: time
    at: !input p2_start_time
    id: p2
  - platform: time
    at: !input p3_start_time
    id: p3
  - platform: time
    at: !input p4_start_time
    id: p4

action:
  - variables:
      sensor: !input soil_moisture_sensor
      valve: !input irrigation_valve
      notify: !input notification_service

  - choose:

      # ===== P1: Ramp-Up =====
      - conditions:
          - condition: template
            value_template: '{{ trigger.id == "p1" }}'
        sequence:
          - service: '{{ notify }}'
            data:
              message: >
                P1 (Ramp-Up) gestartet: Zielfeuchte {{ p1_target_moisture }} %
                (aktuell {{ states(sensor)|float }} %).
          - variables:
              last_moisture: '{{ states(sensor)|float }}'
              shots: 0
          - repeat:
              until:
                - condition: or
                  conditions:
                    - condition: template
                      value_template: '{{ states(sensor)|float >= p1_target_moisture }}'
                    - condition: template
                      value_template: '{{ shots >= p1_max_shots }}'
              sequence:
                - service: switch.turn_on
                  target: { entity_id: '{{ valve }}' }
                - delay: { seconds: '{{ p1_shot_duration }}' }
                - service: switch.turn_off
                  target: { entity_id: '{{ valve }}' }
                - wait_template: >
                    {{ states(sensor)|float <= (last_moisture - p1_dryback_pct) }}
                  timeout: '00:30:00'
                - variables:
                    last_moisture: '{{ states(sensor)|float }}'
                    shots: '{{ shots + 1 }}'
          - service: '{{ notify }}'
            data:
              message: >
                P1 beendet nach {{ shots }} Shots. Feuchte = {{ states(sensor)|float }} %.

      # ===== P2: Maintenance =====
      - conditions:
          - condition: template
            value_template: '{{ trigger.id == "p2" }}'
        sequence:
          - service: '{{ notify }}'
            data:
              message: >
                P2 (Maintenance) gestartet: Intervall {{ p2_interval }} Min.
          - repeat:
              while:
                - condition: time
                  before: !input p2_end_time
              sequence:
                - service: switch.turn_on
                  target: { entity_id: '{{ valve }}' }
                - delay: { seconds: '{{ p2_shot_duration }}' }
                - service: switch.turn_off
                  target: { entity_id: '{{ valve }}' }
                - delay:
                    minutes: !input p2_interval
          - service: '{{ notify }}'
            data:
              message: 'P2 beendet.'

      # ===== P3: Ramp-Down =====
      - conditions:
          - condition: template
            value_template: '{{ trigger.id == "p3" }}'
        sequence:
          - service: '{{ notify }}'
            data:
              message: >
                P3 (Ramp-Down) gestartet: Intervall {{ p3_interval }} Min.
          - repeat:
              while:
                - condition: time
                  before: !input p3_end_time
              sequence:
                - service: switch.turn_on
                  target: { entity_id: '{{ valve }}' }
                - delay: { seconds: '{{ p3_shot_duration }}' }
                - service: switch.turn_off
                  target: { entity_id: '{{ valve }}' }
                - delay:
                    minutes: !input p3_interval
          - service: '{{ notify }}'
            data:
              message: 'P3 beendet.'

      # ===== P4: Dry-Back =====
      - conditions:
          - condition: template
            value_template: '{{ trigger.id == "p4" }}'
        sequence:
          - service: switch.turn_off
            target: { entity_id: '{{ valve }}' }
          - service: '{{ notify }}'
            data:
              message: >
                P4 (Dry-Back) gestartet: Trockenphase bis P1 am nächsten Tag.

    default: []
